<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	
    xmlns:local="clr-namespace:Syncfusion.Windows.Tools.Controls;assembly=Syncfusion.Shared.WPF"
    xmlns:skin="clr-namespace:Syncfusion.Windows.Shared;assembly=Syncfusion.Shared.WPF"
    xmlns:sfskin="clr-namespace:Syncfusion.SfSkinManager;assembly=Syncfusion.SfSkinManager.WPF"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    >
    <ResourceDictionary.MergedDictionaries>
        <sfskin:ResourceDictionaryProvider DictionaryName="Common" ThemeName="MaterialDarkCustom"/>
        <sfskin:ResourceDictionaryProvider DictionaryName="Brushes" ThemeName="MaterialDarkCustom"/>
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate x:Key="LargeIconTemplate">
        <Image x:Name="LargeImage"
            Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"
            Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"
            Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>

    <DataTemplate x:Key="SmallIconTemplate">
        <Image x:Name="smallimage"
            Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"
            Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"
            Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" />
    </DataTemplate>

    <ControlTemplate x:Key="SyncfusionButtonAdvControlTemplate" TargetType="local:ButtonAdv">
        <Border
            Name="ItemBorder1"
            MinHeight="{StaticResource MaterialDarkCustom.MinHeight}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{StaticResource MaterialDarkCustom.ThemeCornerRadiusVariant1}"
            Effect="{StaticResource Default.ShadowDepth1}"
            SnapsToDevicePixels="True"
            >
            <Border.Resources>
                <local:HorizontalContentToTextAlignmentConverter x:Key="TextAlignmentConverter" />
            </Border.Resources>
            <StackPanel
                    Margin="2,0,2,0"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <ContentPresenter x:Name="LargeIconContent" ContentTemplate="{TemplateBinding IconTemplate}" Content="{Binding}" 
                                                          ContentTemplateSelector="{TemplateBinding IconTemplateSelector}"/>
                <TextBlock
                        x:Name="PART_LargeText"
						Text="{TemplateBinding Label}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Foreground="{TemplateBinding Foreground}"
						Margin="2,0,2,1">
                </TextBlock>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="sfskin:SfSkinManager.SizeMode" Value="Touch">
                <Setter Property="MinHeight" Value="{StaticResource TouchMode.MinHeight}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                <Setter TargetName="ItemBorder1" Property="Border.BorderBrush" Value="{StaticResource SecondaryHoverBackground}" />
                <Setter TargetName="PART_LargeText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                <Setter TargetName="ItemBorder1" Property="Effect" Value="{StaticResource Default.ShadowDepth2}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                <Setter TargetName="ItemBorder1" Property="Border.BorderBrush" Value="{StaticResource SecondaryHoverBackground}" />
                <Setter TargetName="PART_LargeText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                <Setter TargetName="ItemBorder1" Property="Effect" Value="{StaticResource Default.ShadowDepth2}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                <Setter TargetName="ItemBorder1" Property="Border.BorderBrush" Value="{StaticResource SecondarySelectionBackground}" />
                <Setter TargetName="PART_LargeText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                <Setter TargetName="ItemBorder1" Property="Effect" Value="{StaticResource Default.ShadowDepth3}" />
            </Trigger>
            <Trigger Property="IsMultiLine" Value="True">
                <Setter Property="TextBlock.TextWrapping" Value="Wrap" TargetName="PART_LargeText"/>
            </Trigger>
            <Trigger Property="IsMultiLine" Value="False">
                <Setter Property="TextBlock.TextWrapping" Value="NoWrap" TargetName="PART_LargeText"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCheckable" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                    <Setter TargetName="ItemBorder1" Property="Border.BorderBrush" Value="{StaticResource SecondarySelectionBackground}" />
                    <Setter TargetName="PART_LargeText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                    <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="LargeIconContent" Property="Opacity" Value="0.38" />
                <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                <Setter TargetName="ItemBorder1" Property="Border.BorderBrush" Value="{StaticResource SecondaryHoverBackground}" />
                <Setter TargetName="PART_LargeText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForegroundDisabled}" />
                <Setter Property="Foreground" Value="{StaticResource SecondaryForegroundDisabled}" />
                <Setter Property="Effect" TargetName="ItemBorder1" Value="{x:Null}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IconTemplate" Value="{x:Null}"/>
                    <Condition Property="IconTemplateSelector" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <Setter Property="ContentTemplate" TargetName="LargeIconContent" Value="{StaticResource LargeIconTemplate}"/>
                <Setter Property="Tag" TargetName="LargeIconContent" Value="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="SyncfusionButtonAdvStyle" TargetType="{x:Type local:ButtonAdv}">
        <Setter Property="SmallIcon" Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt16.png" />
        <Setter Property="LargeIcon" Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt32.png" />
        <Setter Property="Label" Value="Button" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="{StaticResource MaterialDarkCustom.BorderThickness}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource SecondaryBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBackground}" />
        <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
        <Setter Property="FontFamily" Value="{StaticResource MaterialDarkCustom.ThemeFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource MaterialDarkCustom.BodyTextStyle}" />
        <Setter Property="FontWeight" Value="{StaticResource MaterialDarkCustom.FontWeightMedium}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ButtonAdv">
                    <Border
                        Name="ItemBorder"
                        MinHeight="{StaticResource MaterialDarkCustom.MinHeight}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{StaticResource MaterialDarkCustom.ThemeCornerRadiusVariant1}"
                        Effect="{StaticResource Default.ShadowDepth1}"
                        SnapsToDevicePixels="True"
                        >
                        <Border.Resources>
                            <local:HorizontalContentToTextAlignmentConverter x:Key="TextAlignmentConverter" />
                        </Border.Resources>
                        <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="SmallIconContent" ContentTemplate="{TemplateBinding IconTemplate}" Content="{Binding}" Margin="2"
                                                          ContentTemplateSelector="{TemplateBinding IconTemplateSelector}"/>
                            <AccessText
                                    x:Name="PART_NormalText"
                                    Grid.Column="1"
                                    Margin="2,0,2,0"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Text="{TemplateBinding Label}"
                                    TextAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalContentAlignment, Converter={StaticResource TextAlignmentConverter}}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="sfskin:SfSkinManager.SizeMode" Value="Touch">
                            <Setter Property="MinHeight" Value="{StaticResource TouchMode.MinHeight}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IconHeight" Value="0" />
                                <Condition Property="IconWidth" Value="0" />
                                <Condition Property="sfskin:SfSkinManager.SizeMode" Value="Touch" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_NormalText" Property="Border.Margin" Value="0" />
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                            <Setter TargetName="ItemBorder" Property="Border.BorderBrush" Value="{StaticResource SecondaryHoverBackground}" />
                            <Setter TargetName="PART_NormalText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                            <Setter TargetName="ItemBorder" Property="Effect" Value="{StaticResource Default.ShadowDepth2}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                            <Setter TargetName="ItemBorder" Property="Border.BorderBrush" Value="{StaticResource SecondaryHoverBackground}" />
                            <Setter TargetName="PART_NormalText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                            <Setter TargetName="ItemBorder" Property="Effect" Value="{StaticResource Default.ShadowDepth2}" />
                        </Trigger>
                        <Trigger Property="IsMultiLine" Value="True">
                            <Setter TargetName="PART_NormalText" Property="TextBlock.TextWrapping" Value="Wrap" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter TargetName="ItemBorder" Property="Border.BorderBrush" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter TargetName="PART_NormalText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                            <Setter TargetName="ItemBorder" Property="Effect" Value="{StaticResource Default.ShadowDepth3}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCheckable" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                                <Setter TargetName="ItemBorder" Property="Border.BorderBrush" Value="{StaticResource SecondarySelectionBackground}" />
                                <Setter TargetName="PART_NormalText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForeground}" />
                                <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="SmallIconContent" Property="Opacity" Value="0.38" />
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                            <Setter TargetName="ItemBorder" Property="Border.BorderBrush" Value="{StaticResource SecondaryHoverBackground}" />
                            <Setter TargetName="PART_NormalText" Property="TextElement.Foreground" Value="{StaticResource SecondaryForegroundDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForegroundDisabled}" />
                            <Setter Property="Effect" TargetName="ItemBorder" Value="{x:Null}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IconTemplate" Value="{x:Null}"/>
                                <Condition Property="IconTemplateSelector" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ContentTemplate" TargetName="SmallIconContent" Value="{StaticResource SmallIconTemplate}"/>
                            <Setter Property="Tag" TargetName="SmallIconContent" Value="{Binding SmallIcon, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="SizeMode" Value="Large">
                <Setter Property="Template" Value="{StaticResource SyncfusionButtonAdvControlTemplate}" />
            </Trigger>
            <Trigger Property="sfskin:SkinManagerHelper.FocusVisualKind" Value="HighVisibility">
                <Setter Property="FocusVisualStyle" Value="{StaticResource KeyboardFocusVisualStyle}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource SyncfusionButtonAdvStyle}" TargetType="{x:Type local:ButtonAdv}" />

</ResourceDictionary>
